swagger: '2.0'
info:
  description: Este proyecto plantea la creación de un sistema de pedidos online para un restaurante. Poner en funcionamiento las partes necesarias para montar una REST API que permite realizar altas, bajas, modificaciones y obtención de información sobre una estructura de datos que podría consumir un cliente.
  version: 1.0.0
  title: Delilah Restó
  contact:
    email: 1992savg@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: register
    description: Creación de un nuevo usuarios
  - name: login
    description: Acceso a traves de usuario y contraseña
  - name: users
    description: Operaciones sobre los usuarios. __*Necesita Bearer authentication (token otorgado en el login).*__
  - name: products
    description: Operaciones sobre los productos. __*Necesita Bearer authentication (token otorgado en el login).*__
  - name: orders
    description: Operaciones sobre los pedidos. __*Necesita Bearer authentication (token otorgado en el login).*__
  - name: items
    description: Operaciones sobre los items de cada pedido. __*Necesita Bearer authentication (token otorgado en el login).*__
  - name: favorites
    description: Operaciones sobre los productos favoritos de cada usuario. __*Necesita Bearer authentication (token otorgado en el login).*__
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT 
paths:
  /register:
    post:
      tags:
        - register
      summary: Crear usuario
      description: Esta operacion puede ser realizada por cualquier persona
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'Creado objecto usuario '
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Usuario añadido
        '400':
          description: Datos incompletos
  /login:
    post:
      tags:
        - login
      summary: Ingreso de usuario en el sistema
      description: ''
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: El nombre de usuario o email para ingresar
          required: true
          type: string
        - name: password
          in: query
          description: Contraseña de ingreso
          required: true
          type: string
      responses:
        '200':
          description: Bienvenido/a!
          schema:
            $ref: '#/definitions/Token'
          headers:
            X-Expires-After:
              type: string
              format: date-time
              description: el token expira en 1 hora
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Usuario y/o contraseña incorrecta
          schema:
            $ref: '#/definitions/Error'
  /users:
    get:
      security:
      - bearerAuth: []
      tags:
        - users
      summary: Obtiene una lista de todos los usuarios
      description: 'Trae datos del token. Si el usuario es "admin", obtendra una lista de todos los usuarios.<br>Si el usuario es "client", obtendra los datos de su propio usuario.'
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idUser
          in: header
          description: 'Sera usado el "idUser" en cado caso del usuario ser "client" para traer sus propios datos.'
          required: true
          type: string
      responses:
        '200':
          description: Listado de usuarios
          schema:
            $ref: '#/definitions/UsersResAdmin'
        '206':
          description: Informacion de usuario
          schema:
            $ref: '#/definitions/UsersResClient'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para ver la lista de usuarios
  /users/{idUser}:
    get:
      security:
      - bearerAuth: []
      tags:
        - users
      summary: Trae datos de usuario por "idUser". Se debe ser ADMIN
      description: 'Trae datos del token. Si el usuario es __"admin"__, obtendra  los datos del usuario consultado.<br>Si el usuario es "client", obtendra mensaje de no autorizado.'
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idUser
          in: path
          description: 'Sera usado el para traer los datos del usuario a consultar.'
          required: true
          type: string
      responses:
        '200':
          description: Datos del usuario
          schema:
            $ref: '#/definitions/UsersResAdmin'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para ver los detalles del usuario
          schema:
            $ref: '#/definitions/Error'
    put:
      security:
      - bearerAuth: []
      tags:
        - users
      summary: Modificacion de datos de userio
      description: Trae datos del token. Si el usuario es "admin", podra hacer cambios en caulquier "idUser".<br>Si el usuario es "client", solo podra hacer cambios en su propia informacion.
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idUser
          in: path
          description: Sera usado el para traer los datos del usuario a consultar
          required: true
          type: string
        - in: body
          name: body
          description: Datos del usuario a modificar ("isAdmin", solo lo puede modificar por un "admin")
          required: true
          schema:
            $ref: '#/definitions/UsersResAdminPut'
      responses:
        '200':
          description: Usuario modificado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para modificar los detalles del usuario
    delete:
      security:
      - bearerAuth: []
      tags:
        - users
      summary: Borra usuario
      description: Trae datos del token. Solo puede ser realizada por un "admin" para poder borrar un usuario.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idUser
          in: path
          description: Sera usado el para traer los datos del usuario a eliminar
          required: true
          type: string
      responses:
        '200':
          description: Usuario borrado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para borrar usuario
  /products:
    post:
      security:
      - bearerAuth: []
      tags:
        - products
      summary: Crear producto. Se debe ser ADMIN
      description: Trae datos del token. Si el usuario es __"admin"__, podra crear un nuevo producto.<br>Si el usuario es "client", obtendra mensaje de no autorizado.
      operationId: createProduct
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - in: body
          name: body
          description: 'Datos necesarios para crear producto'
          required: true
          schema:
            $ref: '#/definitions/ProductsPut'
      responses:
        '200':
          description: Producto creado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para crear un producto
    get:
      security:
      - bearerAuth: []
      tags:
        - products
      summary: Obtiene una lista de todos los productos
      description: 'Trae  una lista de todos los productos.'
      produces:
        - application/json
      responses:
        '200':
          description: Listado de productos
          schema:
            $ref: '#/definitions/Products'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /products/{idProduct}:
    get:
      security:
      - bearerAuth: []
      tags:
        - products
      summary: Trae datos de producto.
      description: 'Trae los datos del producto consultado por "idProduct".'
      operationId: getProductById
      produces:
        - application/json
      parameters:
        - name: idProduct
          in: path
          description: 'Sera usado para traer los datos del producto a consultar.'
          required: true
          type: string
      responses:
          '200':
            description: Datos del producto
            schema:
              $ref: '#/definitions/Products'
          '400':
            description: Error
            schema:
              $ref: '#/definitions/Error'
    put:
      security:
      - bearerAuth: []
      tags:
        - products
      summary: Modificacion de datos de un producto. Se debe ser ADMIN
      description: Trae datos del token. Si el usuario es __"admin"__, podra modificar los datos del producto consultado.<br>Si el usuario es "client", obtendra mensaje de no autorizado.
      operationId: updateProduct
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idProduct
          in: path
          description: Sera usado el para traer los datos del producto a modificar
          required: true
          type: string
        - in: body
          name: body
          description: Datos del producto a modificar
          required: true
          schema:
            $ref: '#/definitions/Products'
      responses:
        '200':
          description: Producto modificado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para modificar un producto
    delete:
      security:
      - bearerAuth: []
      tags:
        - products
      summary: Borra producto. Se debe ser ADMIN
      description: 'Trae datos del token. Solo puede ser realizada por un "admin" para poder borrar un producto.<br>Si el usuario es "client", obtendra mensaje de no autorizado.'
      operationId: deleteProduct
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idProduct
          in: path
          description: Sera usado el para traer los datos del producto a eliminar
          required: true
          type: string
      responses:
        '200':
          description: Producto borrado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para borrar producto
  /orders:
    post:
      security:
      - bearerAuth: []
      tags:
        - orders
      summary: Crea un pedido.
      description: Cualquier tipo de usuario registrado podra crear un nuevo pedido.
      operationId: createOrder
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'Datos necesarios para crear pedido'
          required: true
          schema:
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Pedido creado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para crear un pedido
    get:
      security:
      - bearerAuth: []
      tags:
        - orders
      summary: Obtiene una lista de todos los pedidos
      description: 'Trae datos del token. Si el usuario es "admin", obtendra una lista de todos los pedidos.<br>Si el usuario es "client", obtendra los datos de sus propios pedidos.'
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
      responses:
        '200':
          description: Listado de pedidos
          schema:
            $ref: '#/definitions/OrdersGet'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /orders/{idOrder}:
    get:
      security:
      - bearerAuth: []
      tags:
        - orders
      summary: Trae datos del pedido.
      description: 'Trae los datos del pedido consultado por "idOrder".'
      operationId: getOrderById
      produces:
        - application/json
      parameters:
        - name: idOrder
          in: path
          description: 'Sera usado para traer los datos del pedido a consultar.'
          required: true
          type: string
      responses:
          '200':
            description: Datos del pedido
            schema:
              $ref: '#/definitions/OrdersGet'
          '400':
            description: Error
            schema:
              $ref: '#/definitions/Error'
    put:
      security:
      - bearerAuth: []
      tags:
        - orders
      summary: Modificacion de datos de un pedido. Se debe ser ADMIN
      description: Trae datos del token. Si el usuario es __"admin"__, podra modificar los datos del pedido consultado.<br>Si el usuario es "client", obtendra mensaje de no autorizado.
      operationId: updateOrder
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idOrder
          in: path
          description: Sera usado el para traer los datos del pedido a modificar
          required: true
          type: string
        - in: body
          name: body
          description: Datos del pedido a modificar
          required: true
          schema:
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Pedido modificado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para modificar un pedido
    delete:
      security:
      - bearerAuth: []
      tags:
        - orders
      summary: Borra pedido. Se debe ser ADMIN
      description: Trae datos del token. Solo puede ser realizada por un "admin" para poder borrar un pedido.
      operationId: deleteOrder
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idOrder
          in: path
          description: Sera usado el para traer los datos del pedido a eliminar
          required: true
          type: string
      responses:
        '200':
          description: Pedido borrado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para borrar pedido
  /orders/{idOrder}/cancelation:
    put:
      security:
      - bearerAuth: []
      tags:
        - orders
      summary: Modificacion de datos de un pedido. Se debe ser ADMIN
      description: 'Trae datos del token. Si el usuario es "admin", podra modificar el status del pedido con "idOrder" a cancelado.<br>Si el usuario es "client", podra modificar el status de su pedido "idOrder" a cancelado, en dado caso de pertenecerle a si mismo.'
      operationId: updateOrderCancelation
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idOrder
          in: path
          description: Sera usado el para traer los datos del pedido a modificar
          required: true
          type: string
      responses:
        '200':
          description: Pedido cancelado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para modificar un pedido
  /items:
    post:
      security:
      - bearerAuth: []
      tags:
        - items
      summary: Crea un items.
      description: Cualquier tipo de usuario registrado podra crear un nuevo item.
      operationId: createItem
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'Datos necesarios para crear item'
          required: true
          schema:
            $ref: '#/definitions/Items'
      responses:
        '200':
          description: Item creado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para crear un item
    get:
      security:
      - bearerAuth: []
      tags:
        - items
      summary: Obtiene una lista de todos los items. Se debe ser ADMIN
      description: 'Trae  una lista de todos los items.'
      produces:
        - application/json
      responses:
        '200':
          description: Listado de items
          schema:
            $ref: '#/definitions/ItemsGet'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /items/{idItem}:
    get:
      security:
      - bearerAuth: []
      tags:
        - items
      summary: Trae datos del item. Se debe ser ADMIN
      description: 'Trae los datos del item consultado por "idItem".'
      operationId: getItemsById
      produces:
        - application/json
      parameters:
        - name: idItem
          in: path
          description: 'Sera usado para traer los datos del item a consultar.'
          required: true
          type: string
      responses:
          '200':
            description: Datos del item
            schema:
              $ref: '#/definitions/ItemsGet'
          '400':
            description: Error
            schema:
              $ref: '#/definitions/Error'
          '401':
            description: No Autorizado para ver un item
    put:
      security:
      - bearerAuth: []
      tags:
        - items
      summary: Modificacion de datos de un item. Se debe ser ADMIN
      description: Trae datos del token. Si el usuario es __"admin"__, podra modificar los datos del item consultado.<br>Si el usuario es "client", obtendra mensaje de no autorizado.
      operationId: updateItems
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idItem
          in: path
          description: Sera usadol para traer los datos del item a modificar
          required: true
          type: string
        - in: body
          name: body
          description: Datos del item a modificar
          required: true
          schema:
            $ref: '#/definitions/Items'
      responses:
        '200':
          description: Item modificado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para modificar un item
    delete:
      security:
      - bearerAuth: []
      tags:
        - items
      summary: Borra item. Se debe ser ADMIN
      description: 'Trae datos del token. Solo puede ser realizada por un "admin" para poder borrar un item.'
      operationId: deleteItem
      produces:
        - application/json
      parameters:
        - name: idItem
          in: path
          description: Sera usado el para traer los datos del item a eliminar
          required: true
          type: string
      responses:
        '200':
          description: Item borrado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para borrar item
  /favorites:
    post:
      security:
      - bearerAuth: []
      tags:
        - favorites
      summary: Crea un favorito.
      description: 'Cualquier tipo de usuario registrado podra crear un nuevo favorito.'
      operationId: createFavorite
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: 'Datos necesarios para crear favorito'
          required: true
          schema:
            $ref: '#/definitions/Favorites'
      responses:
        '200':
          description: Favorito creado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para crear un favorito
    get:
      security:
      - bearerAuth: []
      tags:
        - favorites
      summary: Obtiene una lista de todos los favoritos. Se debe ser ADMIN
      description: 'Trae datos del token. Si el usuario es "admin", obtendra una lista de todos los favoritos.<br>Si el usuario es "client", obtendra los datos de sus propios favoritos.'
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idUser
          in: header
          description: 'Sera usado el "idUser" en cado caso del usuario ser "client" para traer sus propios datos.'
          required: true
          type: string
      responses:
        '200':
          description: Listado de favoritos
          schema:
            $ref: '#/definitions/FavoritesGet'
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
  /favorites/{idFavorite}:
    get:
      security:
      - bearerAuth: []
      tags:
        - favorites
      summary: Trae datos del favorito. Se debe ser ADMIN
      description: 'Trae los datos del favorito consultado por "idFavorite".'
      operationId: getFavoritesById
      produces:
        - application/json
      parameters:
        - name: idFavorite
          in: path
          description: 'Sera usado para traer los datos del favorito a consultar.'
          required: true
          type: string
      responses:
          '200':
            description: Datos del item
            schema:
              $ref: '#/definitions/FavoritesGet'
          '400':
            description: Error
            schema:
              $ref: '#/definitions/Error'
          '401':
            description: No Autorizado para ver un favorito
    put:
      security:
      - bearerAuth: []
      tags:
        - favorites
      summary: Modificacion de datos de un item. Se debe ser ADMIN
      description: Trae datos del token. Si el usuario es __"admin"__, podra modificar los datos del favorito consultado.<br>Si el usuario es "client", obtendra mensaje de no autorizado.
      operationId: idFavorite
      produces:
        - application/json
      parameters:
        - in: header
          name: role
          type: string
          required: true
          description: "admin or client"
        - name: idFavorite
          in: path
          description: Sera usado para traer los datos del favorito a modificar
          required: true
          type: string
        - in: body
          name: body
          description: Datos del favorito a modificar
          required: true
          schema:
            $ref: '#/definitions/Favorites'
      responses:
        '200':
          description: Favorito modificado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para modificar un favorito
    delete:
      security:
      - bearerAuth: []
      tags:
        - favorites
      summary: Borra item.
      description: 'Trae datos del token. Si el usuario es "admin", podra borrar el favorito indicado por "idFavorite".<br>Si el usuario es "client", borrar el favorito perteneciente a supropio "idUser".'
      operationId: deleteFavorite
      produces:
        - application/json
      parameters:
        - name: idFavorite
          in: path
          description: Sera usado el para traer los datos del favorito a eliminar
          required: true
          type: string
      responses:
        '200':
          description: Favorito borrado
        '400':
          description: Error
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No Autorizado para borrar favorito
definitions:
  User:
    type: object
    properties:
      firstName:
        type: string
        format: int255
      lastName:
        type: string
        format: int255
      username:
        type: string
        format: int255
      password:
        type: string
        format: int60
      email:
        type: string
        format: int320
      phone:
        type: string
        format: int25
      address:
        type: string
        format: int255
  UsersResAdmin:
    type: object
    properties:
      idUser:
        type: integer
        format: int64
      firstName:
        type: string
        format: int255
      lastName:
        type: string
        format: int255
      username:
        type: string
        format: int255
      email:
        type: string
        format: int320
      phone:
        type: string
        format: int25
      address:
        type: string
        format: int255
      isAdmin:
        type: string
        enum:
          - admin
          - client
      createdAt:
        type: string
      updatedAt:
        type: string
  UsersResClient:
    type: object
    properties:
      idUser:
        type: integer
        format: int64
      firstName:
        type: string
        format: int255
      lastName:
        type: string
        format: int255
      username:
        type: string
        format: int255
      email:
        type: string
        format: int320
      phone:
        type: string
        format: int25
      address:
        type: string
        format: int255
  UsersResAdminPut:
    type: object
    properties:
      firstName:
        type: string
        format: int255
      lastName:
        type: string
        format: int255
      username:
        type: string
        format: int255
      password:
        type: string
        format: int60
      email:
        type: string
        format: int320
      phone:
        type: string
        format: int25
      address:
        type: string
        format: int255
      isAdmin:
        type: string
        enum:
          - admin
          - client
  ProductsPut:
    type: object
    properties:
      productName:
        type: string
        format: int100
      shortName:
        type: string
        format: int50
      unitPrice:
        type: number
      description:
        type: string
      imgProduct:
        type: string
        format: int255
  Products:
    type: object
    properties:
      idProduct:
        type: integer
        format: int64
      productName:
        type: string
        format: int100
      shortName:
        type: string
        format: int50
      unitPrice:
        type: number
      description:
        type: string
      imgProduct:
        type: string
        format: int255
  Orders:
    type: object
    properties:
      status:
        type: string
        description: Estado del pedido
        enum:
          - borrador
          - creado
          - confirmado
          - en preparacion
          - en camino
          - entregado
          - cancelado
      userId:
        type: integer
      totalPrice:
        type: number
      paymentMethod:
        type: string
        description: Estado del pedido
        enum:
          - efectivo
          - tarjeta
  OrdersGet:
    type: object
    properties:
      idOrder:
        type: integer
      status:
        type: string
        description: Estado del pedido
        enum:
          - borrador
          - creado
          - confirmado
          - en preparacion
          - en camino
          - entregado
          - cancelado
      userId:
        type: integer
      totalPrice:
        type: number
      paymentMethod:
        type: string
        description: Estado del pedido
        enum:
          - efectivo
          - tarjeta
      createdAt:
        type: string
      updatedAt:
        type: string
  Items:
    type: object
    properties:
      orderId:
        type: integer
      productId:
        type: integer
      quantity:
        type: integer
      price:
        type: number
  ItemsGet:
    type: object
    properties:
      idItem:
        type: integer
      orderId:
        type: integer
      productId:
        type: integer
      quantity:
        type: integer
      price:
        type: number
      createdAt:
        type: string
      updatedAt:
        type: string
  Favorites:
    type: object
    properties:
      userId:
        type: integer
      productId:
        type: integer
  FavoritesGet:
    type: object
    properties:
      idFavorite:
        type: integer
      userId:
        type: integer
      productId:
        type: integer
      createdAt:
        type: string
      updatedAt:
        type: string
  Error:
    type: object
    properties:
      error:
        type: string
  Token:
    type: object
    properties:
      token:
        type: string
externalDocs:
  description: Ir al repositorio
  url: http://github.com/savg9